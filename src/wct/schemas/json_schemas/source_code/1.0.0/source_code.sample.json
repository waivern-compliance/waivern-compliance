{
  "schemaVersion": "1.0.0",
  "name": "source_code_analysis_ecommerce_app",
  "description": "Source code analysis of e-commerce application",
  "language": "php",
  "source": "/app/src",
  "metadata": {
    "total_files": 2,
    "total_lines": 340,
    "analysis_timestamp": "2024-08-01T14:30:45.123456",
    "parser_version": "tree-sitter-languages-1.10.0+"
  },
  "data": [
    {
      "file_path": "controllers/UserController.php",
      "language": "php",
      "raw_content": "<?php\n\nuse App\\Models\\User;\nuse App\\Services\\EncryptionService as Encryption;\n\nclass UserController extends BaseController implements AuthenticatedControllerInterface, GDPRCompliantInterface\n{\n    private DatabaseConnection $database;\n    private string $encryptionKey;\n    protected AuditLogger $auditLogger;\n\n    public function __construct(DatabaseConnection $db)\n    {\n        $this->database = $db;\n        $this->encryptionKey = getenv('ENCRYPTION_KEY');\n        $this->auditLogger = new AuditLogger();\n    }\n\n    /**\n     * Retrieve user by ID - handles personal data\n     */\n    public function getUserById(int $userId): ?User\n    {\n        $stmt = $this->database->prepare('SELECT * FROM users WHERE id = ?');\n        $stmt->execute([$userId]);\n        return $stmt->fetchObject(User::class);\n    }\n\n    /**\n     * Create new user account with validation\n     */\n    public function createUser(array $userData, bool $validateEmail = true): User\n    {\n        $email = $_POST['email'];\n        $name = $_POST['name'];\n        $phone = $_POST['phone'];\n        \n        if ($validateEmail && !$this->validateEmail($email)) {\n            throw new InvalidArgumentException('Invalid email format');\n        }\n        \n        $hashedPassword = $this->hashPassword($_POST['password']);\n        \n        $stmt = $this->database->prepare(\n            'INSERT INTO users (name, email, phone, password_hash, created_at) VALUES (?, ?, ?, ?, NOW())'\n        );\n        $stmt->execute([$name, $email, $phone, $hashedPassword]);\n        \n        return $this->getUserById($this->database->lastInsertId());\n    }\n\n    /**\n     * Hash password using secure algorithm\n     */\n    private static function hashPassword(string $password): string\n    {\n        return password_hash($password, PASSWORD_ARGON2ID);\n    }\n    \n    private function validateEmail(string $email): bool\n    {\n        return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n    }\n}",
      "functions": [
        {
          "name": "getUserById",
          "line_start": 22,
          "line_end": 27,
          "parameters": [
            {
              "name": "$userId",
              "type": "int",
              "default_value": null
            }
          ],
          "return_type": "?User",
          "visibility": "public",
          "is_static": false,
          "docstring": "Retrieve user by ID - handles personal data"
        },
        {
          "name": "createUser",
          "line_start": 32,
          "line_end": 50,
          "parameters": [
            {
              "name": "$userData",
              "type": "array",
              "default_value": null
            },
            {
              "name": "$validateEmail",
              "type": "bool",
              "default_value": "true"
            }
          ],
          "return_type": "User",
          "visibility": "public",
          "is_static": false,
          "docstring": "Create new user account with validation"
        },
        {
          "name": "hashPassword",
          "line_start": 55,
          "line_end": 58,
          "parameters": [
            {
              "name": "$password",
              "type": "string",
              "default_value": null
            }
          ],
          "return_type": "string",
          "visibility": "private",
          "is_static": true,
          "docstring": null
        }
      ],
      "classes": [
        {
          "name": "UserController",
          "line_start": 6,
          "line_end": 65,
          "extends": "BaseController",
          "implements": [
            "AuthenticatedControllerInterface",
            "GDPRCompliantInterface"
          ],
          "properties": [
            {
              "name": "$database",
              "type": "DatabaseConnection",
              "visibility": "private",
              "is_static": false,
              "default_value": null
            },
            {
              "name": "$encryptionKey",
              "type": "string",
              "visibility": "private",
              "is_static": false,
              "default_value": null
            },
            {
              "name": "$auditLogger",
              "type": "AuditLogger",
              "visibility": "protected",
              "is_static": false,
              "default_value": null
            }
          ],
          "methods": [
            {
              "name": "__construct",
              "line_start": 12,
              "line_end": 17,
              "parameters": [
                {
                  "name": "$db",
                  "type": "DatabaseConnection",
                  "default_value": null
                }
              ],
              "return_type": null,
              "visibility": "public",
              "is_static": false,
              "docstring": null
            }
          ]
        }
      ],
      "imports": [
        {
          "module": "App\\Models\\User",
          "alias": null,
          "line": 3,
          "type": "use"
        },
        {
          "module": "App\\Services\\EncryptionService",
          "alias": "Encryption",
          "line": 4,
          "type": "use"
        }
      ],
      "metadata": {
        "file_size": 2150,
        "line_count": 65,
        "complexity_score": 18.5,
        "last_modified": "2024-07-28T09:15:32.456789"
      }
    },
    {
      "file_path": "models/User.php",
      "language": "php",
      "raw_content": "<?php\n\nuse App\\Interfaces\\GDPRSubjectInterface;\n\nclass User extends BaseModel implements JsonSerializable, GDPRSubjectInterface\n{\n    protected int $id;\n    protected string $email;\n    protected string $name;\n    protected bool $gdpr_consent = false;\n\n    /**\n     * Validate email format using GDPR-compliant rules\n     */\n    private static function validateEmail(string $email): bool\n    {\n        return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n    }\n\n    /**\n     * Anonymize user data for GDPR right to be forgotten\n     */\n    public function anonymize(): bool\n    {\n        $stmt = $this->database->prepare(\n            'UPDATE users SET name = ?, email = ? WHERE id = ?'\n        );\n        return $stmt->execute(['ANONYMIZED', 'anonymized@example.com', $this->id]);\n    }\n\n    /**\n     * Export all personal data for GDPR data portability\n     */\n    public function exportPersonalData(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'gdpr_consent' => $this->gdpr_consent\n        ];\n    }\n}",
      "functions": [
        {
          "name": "validateEmail",
          "line_start": 15,
          "line_end": 18,
          "parameters": [
            {
              "name": "$email",
              "type": "string",
              "default_value": null
            }
          ],
          "return_type": "bool",
          "visibility": "private",
          "is_static": true,
          "docstring": "Validate email format using GDPR-compliant rules"
        }
      ],
      "classes": [
        {
          "name": "User",
          "line_start": 5,
          "line_end": 43,
          "extends": "BaseModel",
          "implements": [
            "JsonSerializable",
            "GDPRSubjectInterface"
          ],
          "properties": [
            {
              "name": "$id",
              "type": "int",
              "visibility": "protected",
              "is_static": false,
              "default_value": null
            },
            {
              "name": "$email",
              "type": "string",
              "visibility": "protected",
              "is_static": false,
              "default_value": null
            },
            {
              "name": "$name",
              "type": "string",
              "visibility": "protected",
              "is_static": false,
              "default_value": null
            },
            {
              "name": "$gdpr_consent",
              "type": "bool",
              "visibility": "protected",
              "is_static": false,
              "default_value": "false"
            }
          ],
          "methods": [
            {
              "name": "anonymize",
              "line_start": 23,
              "line_end": 29,
              "parameters": [],
              "return_type": "bool",
              "visibility": "public",
              "is_static": false,
              "docstring": "Anonymize user data for GDPR right to be forgotten"
            },
            {
              "name": "exportPersonalData",
              "line_start": 34,
              "line_end": 42,
              "parameters": [],
              "return_type": "array",
              "visibility": "public",
              "is_static": false,
              "docstring": "Export all personal data for GDPR data portability"
            }
          ]
        }
      ],
      "imports": [
        {
          "module": "App\\Interfaces\\GDPRSubjectInterface",
          "alias": null,
          "line": 3,
          "type": "use"
        }
      ],
      "metadata": {
        "file_size": 1095,
        "line_count": 43,
        "complexity_score": 8.2,
        "last_modified": "2024-07-25T16:42:18.789012"
      }
    }
  ]
}
