"""Standard input schema for WCT.

This module defines the StandardInputSchema class that represents
the standard input format used by most WCT connectors.
"""

from __future__ import annotations

from dataclasses import dataclass, field
from typing import Any, override

from pydantic import BaseModel, Field

from .base import JsonSchemaLoader, Schema, SchemaLoader


class BaseMetadata(BaseModel):
    """Base metadata class for all WCT-connector generated data.

    All WCT schemas compliant data generated by connectors must
    include source identification (this is required for all input data)
    and connector type for proper schema routing and analysis.
    """

    source: str = Field(description="Source identifier for the data item")
    connector_type: str = Field(
        description="Type of connector that generated this data point"
    )


class RelationalDatabaseMetadata(BaseMetadata):
    """Metadata for data generated by relational database connectors (MySQL, PostgreSQL, etc.).

    Provides specific relational database context for data subject classification
    and compliance analysis.
    """

    table_name: str = Field(description="Name of the database table")
    column_name: str = Field(description="Name of the database column")
    schema_name: str = Field(description="Name of the database schema")


class FilesystemMetadata(BaseMetadata):
    """Metadata for data generated by filesystem connectors.

    Provides file context for data subject classification
    and compliance analysis in file-based data sources.
    """

    file_path: str = Field(description="Path to the source file")


class StandardInputDataItemModel[MetadataT: BaseMetadata](BaseModel):
    """Individual data item in standard_input schema."""

    content: str = Field(description="The actual content/data")
    metadata: MetadataT = Field(description="Metadata about the data item")


class StandardInputDataModel[MetadataT: BaseMetadata](BaseModel):
    """Complete structure of standard_input schema data."""

    schemaVersion: str = Field(description="Schema version identifier")
    name: str = Field(description="Name/identifier for this data set")
    data: list[StandardInputDataItemModel[MetadataT]] = Field(
        description="List of data items"
    )
    description: str | None = Field(default=None, description="Optional description")
    contentEncoding: str | None = Field(
        default=None, description="Content encoding if applicable"
    )
    source: str | None = Field(default=None, description="Source of the data")
    metadata: dict[str, Any] = Field(
        default_factory=dict, description="Additional metadata"
    )


@dataclass(frozen=True, slots=True)
class StandardInputSchema(Schema):
    """Schema for standard input data format.

    This schema represents the common input format used by filesystem
    connectors and other basic data sources.
    """

    _VERSION = "1.0.0"

    _loader: SchemaLoader = field(default_factory=JsonSchemaLoader, init=False)

    @property
    @override
    def name(self) -> str:
        """Return the schema name."""
        return "standard_input"

    @property
    @override
    def version(self) -> str:
        """Return the schema version."""
        return self._VERSION

    @property
    @override
    def schema(self) -> dict[str, Any]:
        """Return the JSON schema definition for validation."""
        return self._loader.load(self.name, self.version)
