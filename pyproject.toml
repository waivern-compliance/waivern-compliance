[project]
name = "waivern-compliance-tool"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "annotated-types>=0.7.0",
    "jsonschema>=4.25.0",
    "pydantic>=2.11.5",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.2",
    "rich>=13.0.0",
    "typer>=0.16.0",
    "typing-extensions>=4.14.0",
    "langchain>=0.3.0",
    "langchain-anthropic>=0.2.0",
]

[project.scripts]
wct = "wct.__main__:app"


[dependency-groups]
dev = [
    "basedpyright>=1.29.2",
    "pytest>=8.4.0",
    "pytest-mock>=3.14.1",
    "ruff>=0.11.12",
    "pre-commit>=4.0.0",
    "mypy>=1.17.0",
]
mysql = ["cryptography>=45.0.5", "pymysql>=1.1.1"]
source-code = ["tree-sitter>=0.21.0", "tree-sitter-php>=0.22.0"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/wct"]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    # Allow test files to have the same name in different directories.
    # This is necessary because we have multiple packages in the workspace, each
    # with a `tests` directory.
    # See https://docs.pytest.org/en/stable/explanation/goodpractices.html#tests-outside-application-code
    "--import-mode=importlib",
]

[tool.basedpyright]
include = ["src/wct"]
typeCheckingMode = "strict"

# Critical errors only
reportMissingModuleSource = "none"        # Allow optional dependencies
reportMissingImports = "error"            # Missing imports are always errors
reportUndefinedVariable = "error"         # Undefined variables are always errors
reportGeneralTypeIssues = "warning"       # Type issues as warnings, not errors

# Allow some flexibility for external libraries and YAML parsing
# This is not ideal, but necessary for compatibility with dynamic data
# Perhaps we can fix these in the future (TODO)
reportUnknownMemberType = "none"          # Common with external libraries
reportUnknownArgumentType = "none"        # Common with YAML/JSON parsing
reportUnknownVariableType = "none"        # Common with dynamic data

[tool.mypy]
files = ["src/"]
plugins = ['pydantic.mypy']
allow_redefinition = true
enable_error_code = "possibly-undefined"
strict = true
warn_unreachable = true

[tool.ruff.lint]
select = [
    "D",      # pydocstyle
    "F",      # pyflakes
    "I",      # isort
    "PL",     # pylint
    "RUF100", # unused-noqa-directive
    "S",      # bandit
    "UP",     # pyupgrade
]
ignore = [
    "D203",    # incorrect-blank-line-before-class (conflicts with D211)
    "D213",    # multi-line-summary-second-line (conflicts with D212)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # Unused imports
]
"tests/**/*.py" = [
    "D", # Documentation
    "S101", # Use of assert detected
    "PLR2004", # Magic value used in comparison - acceptable in tests
]
# Connector constructors need many database/filesystem parameters
"src/wct/connectors/*/connector.py" = [
    "PLR0913",  # Too many arguments - acceptable for connector configuration
]
# Prompt functions legitimately need many string parameters
"src/wct/prompts/*.py" = [
    "PLR0913",  # Too many arguments - acceptable for prompt parameter functions
]
# Executor step analysis needs many orchestration parameters
"src/wct/executor.py" = [
    "PLR0913",  # Too many arguments - acceptable for analysis orchestration
]

[tool.ruff.lint.pydocstyle]
ignore-decorators = ["typing.overload"]
